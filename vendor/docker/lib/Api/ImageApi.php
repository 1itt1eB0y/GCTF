<?php
/**
 * ImageApi
 * PHP version 5
 *
 * @category Class
 * @package  Docker\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.41) is used. For example, calling `/info` is the same as calling `/v1.41/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.41
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Docker\Client\ApiException;
use Docker\Client\Configuration;
use Docker\Client\HeaderSelector;
use Docker\Client\ObjectSerializer;

/**
 * ImageApi Class Doc Comment
 *
 * @category Class
 * @package  Docker\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation buildPrune
     *
     * Delete builder cache
     *
     * @param  int $keep_storage Amount of disk space in bytes to keep for cache (optional)
     * @param  bool $all Remove all types of build cache (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#x27;s time, during which build cache was not used, in Go&#x27;s duration format (e.g., &#x27;24h&#x27;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\BuildPruneResponse
     */
    public function buildPrune($keep_storage = null, $all = null, $filters = null)
    {
        list($response) = $this->buildPruneWithHttpInfo($keep_storage, $all, $filters);
        return $response;
    }

    /**
     * Operation buildPruneWithHttpInfo
     *
     * Delete builder cache
     *
     * @param  int $keep_storage Amount of disk space in bytes to keep for cache (optional)
     * @param  bool $all Remove all types of build cache (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#x27;s time, during which build cache was not used, in Go&#x27;s duration format (e.g., &#x27;24h&#x27;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\BuildPruneResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function buildPruneWithHttpInfo($keep_storage = null, $all = null, $filters = null)
    {
        $returnType = '\Docker\Client\Model\BuildPruneResponse';
        $request = $this->buildPruneRequest($keep_storage, $all, $filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\BuildPruneResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation buildPruneAsync
     *
     * Delete builder cache
     *
     * @param  int $keep_storage Amount of disk space in bytes to keep for cache (optional)
     * @param  bool $all Remove all types of build cache (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#x27;s time, during which build cache was not used, in Go&#x27;s duration format (e.g., &#x27;24h&#x27;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildPruneAsync($keep_storage = null, $all = null, $filters = null)
    {
        return $this->buildPruneAsyncWithHttpInfo($keep_storage, $all, $filters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation buildPruneAsyncWithHttpInfo
     *
     * Delete builder cache
     *
     * @param  int $keep_storage Amount of disk space in bytes to keep for cache (optional)
     * @param  bool $all Remove all types of build cache (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#x27;s time, during which build cache was not used, in Go&#x27;s duration format (e.g., &#x27;24h&#x27;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function buildPruneAsyncWithHttpInfo($keep_storage = null, $all = null, $filters = null)
    {
        $returnType = '\Docker\Client\Model\BuildPruneResponse';
        $request = $this->buildPruneRequest($keep_storage, $all, $filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'buildPrune'
     *
     * @param  int $keep_storage Amount of disk space in bytes to keep for cache (optional)
     * @param  bool $all Remove all types of build cache (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;duration&gt;&#x60;: duration relative to daemon&#x27;s time, during which build cache was not used, in Go&#x27;s duration format (e.g., &#x27;24h&#x27;) - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function buildPruneRequest($keep_storage = null, $all = null, $filters = null)
    {

        $resourcePath = '/build/prune';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keep_storage !== null) {
            $queryParams['keep-storage'] = ObjectSerializer::toQueryValue($keep_storage, 'int64');
        }
        // query params
        if ($all !== null) {
            $queryParams['all'] = ObjectSerializer::toQueryValue($all, null);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageBuild
     *
     * Build an image
     *
     * @param  Object $body A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     * @param  string $content_type content_type (optional, default to application/x-tar)
     * @param  string $x_registry_config This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. (optional)
     * @param  string $dockerfile Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to Dockerfile)
     * @param  string $t A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     * @param  string $extrahosts Extra hosts to add to /etc/hosts (optional)
     * @param  string $remote A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     * @param  bool $q Suppress verbose build output. (optional, default to false)
     * @param  bool $nocache Do not use the cache when building the image. (optional, default to false)
     * @param  string $cachefrom JSON array of images used for build cache resolution. (optional)
     * @param  string $pull Attempt to pull the image even if an older image exists locally. (optional)
     * @param  bool $rm Remove intermediate containers after a successful build. (optional, default to true)
     * @param  bool $forcerm Always remove intermediate containers, even upon failure. (optional, default to false)
     * @param  int $memory Set memory limit for build. (optional)
     * @param  int $memswap Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     * @param  int $cpushares CPU shares (relative weight). (optional)
     * @param  string $cpusetcpus CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     * @param  int $cpuperiod The length of a CPU period in microseconds. (optional)
     * @param  int $cpuquota Microseconds of CPU time that the container can get in a CPU period. (optional)
     * @param  string $buildargs JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg) (optional)
     * @param  int $shmsize Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     * @param  bool $squash Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     * @param  string $labels Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     * @param  string $networkmode Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#x27;s name or ID to which this container should connect to. (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     * @param  string $target Target build stage (optional)
     * @param  string $outputs BuildKit output configuration (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function imageBuild($body = null, $content_type = 'application/x-tar', $x_registry_config = null, $dockerfile = 'Dockerfile', $t = null, $extrahosts = null, $remote = null, $q = 'false', $nocache = 'false', $cachefrom = null, $pull = null, $rm = 'true', $forcerm = 'false', $memory = null, $memswap = null, $cpushares = null, $cpusetcpus = null, $cpuperiod = null, $cpuquota = null, $buildargs = null, $shmsize = null, $squash = null, $labels = null, $networkmode = null, $platform = null, $target = null, $outputs = null)
    {
        $this->imageBuildWithHttpInfo($body, $content_type, $x_registry_config, $dockerfile, $t, $extrahosts, $remote, $q, $nocache, $cachefrom, $pull, $rm, $forcerm, $memory, $memswap, $cpushares, $cpusetcpus, $cpuperiod, $cpuquota, $buildargs, $shmsize, $squash, $labels, $networkmode, $platform, $target, $outputs);
    }

    /**
     * Operation imageBuildWithHttpInfo
     *
     * Build an image
     *
     * @param  Object $body A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     * @param  string $content_type (optional, default to application/x-tar)
     * @param  string $x_registry_config This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. (optional)
     * @param  string $dockerfile Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to Dockerfile)
     * @param  string $t A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     * @param  string $extrahosts Extra hosts to add to /etc/hosts (optional)
     * @param  string $remote A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     * @param  bool $q Suppress verbose build output. (optional, default to false)
     * @param  bool $nocache Do not use the cache when building the image. (optional, default to false)
     * @param  string $cachefrom JSON array of images used for build cache resolution. (optional)
     * @param  string $pull Attempt to pull the image even if an older image exists locally. (optional)
     * @param  bool $rm Remove intermediate containers after a successful build. (optional, default to true)
     * @param  bool $forcerm Always remove intermediate containers, even upon failure. (optional, default to false)
     * @param  int $memory Set memory limit for build. (optional)
     * @param  int $memswap Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     * @param  int $cpushares CPU shares (relative weight). (optional)
     * @param  string $cpusetcpus CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     * @param  int $cpuperiod The length of a CPU period in microseconds. (optional)
     * @param  int $cpuquota Microseconds of CPU time that the container can get in a CPU period. (optional)
     * @param  string $buildargs JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg) (optional)
     * @param  int $shmsize Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     * @param  bool $squash Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     * @param  string $labels Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     * @param  string $networkmode Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#x27;s name or ID to which this container should connect to. (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     * @param  string $target Target build stage (optional)
     * @param  string $outputs BuildKit output configuration (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageBuildWithHttpInfo($body = null, $content_type = 'application/x-tar', $x_registry_config = null, $dockerfile = 'Dockerfile', $t = null, $extrahosts = null, $remote = null, $q = 'false', $nocache = 'false', $cachefrom = null, $pull = null, $rm = 'true', $forcerm = 'false', $memory = null, $memswap = null, $cpushares = null, $cpusetcpus = null, $cpuperiod = null, $cpuquota = null, $buildargs = null, $shmsize = null, $squash = null, $labels = null, $networkmode = null, $platform = null, $target = null, $outputs = null)
    {
        $returnType = '';
        $request = $this->imageBuildRequest($body, $content_type, $x_registry_config, $dockerfile, $t, $extrahosts, $remote, $q, $nocache, $cachefrom, $pull, $rm, $forcerm, $memory, $memswap, $cpushares, $cpusetcpus, $cpuperiod, $cpuquota, $buildargs, $shmsize, $squash, $labels, $networkmode, $platform, $target, $outputs);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageBuildAsync
     *
     * Build an image
     *
     * @param  Object $body A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     * @param  string $content_type (optional, default to application/x-tar)
     * @param  string $x_registry_config This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. (optional)
     * @param  string $dockerfile Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to Dockerfile)
     * @param  string $t A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     * @param  string $extrahosts Extra hosts to add to /etc/hosts (optional)
     * @param  string $remote A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     * @param  bool $q Suppress verbose build output. (optional, default to false)
     * @param  bool $nocache Do not use the cache when building the image. (optional, default to false)
     * @param  string $cachefrom JSON array of images used for build cache resolution. (optional)
     * @param  string $pull Attempt to pull the image even if an older image exists locally. (optional)
     * @param  bool $rm Remove intermediate containers after a successful build. (optional, default to true)
     * @param  bool $forcerm Always remove intermediate containers, even upon failure. (optional, default to false)
     * @param  int $memory Set memory limit for build. (optional)
     * @param  int $memswap Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     * @param  int $cpushares CPU shares (relative weight). (optional)
     * @param  string $cpusetcpus CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     * @param  int $cpuperiod The length of a CPU period in microseconds. (optional)
     * @param  int $cpuquota Microseconds of CPU time that the container can get in a CPU period. (optional)
     * @param  string $buildargs JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg) (optional)
     * @param  int $shmsize Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     * @param  bool $squash Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     * @param  string $labels Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     * @param  string $networkmode Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#x27;s name or ID to which this container should connect to. (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     * @param  string $target Target build stage (optional)
     * @param  string $outputs BuildKit output configuration (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageBuildAsync($body = null, $content_type = 'application/x-tar', $x_registry_config = null, $dockerfile = 'Dockerfile', $t = null, $extrahosts = null, $remote = null, $q = 'false', $nocache = 'false', $cachefrom = null, $pull = null, $rm = 'true', $forcerm = 'false', $memory = null, $memswap = null, $cpushares = null, $cpusetcpus = null, $cpuperiod = null, $cpuquota = null, $buildargs = null, $shmsize = null, $squash = null, $labels = null, $networkmode = null, $platform = null, $target = null, $outputs = null)
    {
        return $this->imageBuildAsyncWithHttpInfo($body, $content_type, $x_registry_config, $dockerfile, $t, $extrahosts, $remote, $q, $nocache, $cachefrom, $pull, $rm, $forcerm, $memory, $memswap, $cpushares, $cpusetcpus, $cpuperiod, $cpuquota, $buildargs, $shmsize, $squash, $labels, $networkmode, $platform, $target, $outputs)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageBuildAsyncWithHttpInfo
     *
     * Build an image
     *
     * @param  Object $body A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     * @param  string $content_type (optional, default to application/x-tar)
     * @param  string $x_registry_config This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. (optional)
     * @param  string $dockerfile Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to Dockerfile)
     * @param  string $t A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     * @param  string $extrahosts Extra hosts to add to /etc/hosts (optional)
     * @param  string $remote A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     * @param  bool $q Suppress verbose build output. (optional, default to false)
     * @param  bool $nocache Do not use the cache when building the image. (optional, default to false)
     * @param  string $cachefrom JSON array of images used for build cache resolution. (optional)
     * @param  string $pull Attempt to pull the image even if an older image exists locally. (optional)
     * @param  bool $rm Remove intermediate containers after a successful build. (optional, default to true)
     * @param  bool $forcerm Always remove intermediate containers, even upon failure. (optional, default to false)
     * @param  int $memory Set memory limit for build. (optional)
     * @param  int $memswap Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     * @param  int $cpushares CPU shares (relative weight). (optional)
     * @param  string $cpusetcpus CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     * @param  int $cpuperiod The length of a CPU period in microseconds. (optional)
     * @param  int $cpuquota Microseconds of CPU time that the container can get in a CPU period. (optional)
     * @param  string $buildargs JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg) (optional)
     * @param  int $shmsize Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     * @param  bool $squash Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     * @param  string $labels Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     * @param  string $networkmode Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#x27;s name or ID to which this container should connect to. (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     * @param  string $target Target build stage (optional)
     * @param  string $outputs BuildKit output configuration (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageBuildAsyncWithHttpInfo($body = null, $content_type = 'application/x-tar', $x_registry_config = null, $dockerfile = 'Dockerfile', $t = null, $extrahosts = null, $remote = null, $q = 'false', $nocache = 'false', $cachefrom = null, $pull = null, $rm = 'true', $forcerm = 'false', $memory = null, $memswap = null, $cpushares = null, $cpusetcpus = null, $cpuperiod = null, $cpuquota = null, $buildargs = null, $shmsize = null, $squash = null, $labels = null, $networkmode = null, $platform = null, $target = null, $outputs = null)
    {
        $returnType = '';
        $request = $this->imageBuildRequest($body, $content_type, $x_registry_config, $dockerfile, $t, $extrahosts, $remote, $q, $nocache, $cachefrom, $pull, $rm, $forcerm, $memory, $memswap, $cpushares, $cpusetcpus, $cpuperiod, $cpuquota, $buildargs, $shmsize, $squash, $labels, $networkmode, $platform, $target, $outputs);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageBuild'
     *
     * @param  Object $body A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. (optional)
     * @param  string $content_type (optional, default to application/x-tar)
     * @param  string $x_registry_config This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. (optional)
     * @param  string $dockerfile Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;. (optional, default to Dockerfile)
     * @param  string $t A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters. (optional)
     * @param  string $extrahosts Extra hosts to add to /etc/hosts (optional)
     * @param  string $remote A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball. (optional)
     * @param  bool $q Suppress verbose build output. (optional, default to false)
     * @param  bool $nocache Do not use the cache when building the image. (optional, default to false)
     * @param  string $cachefrom JSON array of images used for build cache resolution. (optional)
     * @param  string $pull Attempt to pull the image even if an older image exists locally. (optional)
     * @param  bool $rm Remove intermediate containers after a successful build. (optional, default to true)
     * @param  bool $forcerm Always remove intermediate containers, even upon failure. (optional, default to false)
     * @param  int $memory Set memory limit for build. (optional)
     * @param  int $memswap Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap. (optional)
     * @param  int $cpushares CPU shares (relative weight). (optional)
     * @param  string $cpusetcpus CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). (optional)
     * @param  int $cpuperiod The length of a CPU period in microseconds. (optional)
     * @param  int $cpuquota Microseconds of CPU time that the container can get in a CPU period. (optional)
     * @param  string $buildargs JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](/engine/reference/builder/#arg) (optional)
     * @param  int $shmsize Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB. (optional)
     * @param  bool $squash Squash the resulting images layers into a single layer. *(Experimental release only.)* (optional)
     * @param  string $labels Arbitrary key/value labels to set on the image, as a JSON map of string pairs. (optional)
     * @param  string $networkmode Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#x27;s name or ID to which this container should connect to. (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     * @param  string $target Target build stage (optional)
     * @param  string $outputs BuildKit output configuration (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageBuildRequest($body = null, $content_type = 'application/x-tar', $x_registry_config = null, $dockerfile = 'Dockerfile', $t = null, $extrahosts = null, $remote = null, $q = 'false', $nocache = 'false', $cachefrom = null, $pull = null, $rm = 'true', $forcerm = 'false', $memory = null, $memswap = null, $cpushares = null, $cpusetcpus = null, $cpuperiod = null, $cpuquota = null, $buildargs = null, $shmsize = null, $squash = null, $labels = null, $networkmode = null, $platform = null, $target = null, $outputs = null)
    {

        $resourcePath = '/build';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dockerfile !== null) {
            $queryParams['dockerfile'] = ObjectSerializer::toQueryValue($dockerfile, null);
        }
        // query params
        if ($t !== null) {
            $queryParams['t'] = ObjectSerializer::toQueryValue($t, null);
        }
        // query params
        if ($extrahosts !== null) {
            $queryParams['extrahosts'] = ObjectSerializer::toQueryValue($extrahosts, null);
        }
        // query params
        if ($remote !== null) {
            $queryParams['remote'] = ObjectSerializer::toQueryValue($remote, null);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if ($nocache !== null) {
            $queryParams['nocache'] = ObjectSerializer::toQueryValue($nocache, null);
        }
        // query params
        if ($cachefrom !== null) {
            $queryParams['cachefrom'] = ObjectSerializer::toQueryValue($cachefrom, null);
        }
        // query params
        if ($pull !== null) {
            $queryParams['pull'] = ObjectSerializer::toQueryValue($pull, null);
        }
        // query params
        if ($rm !== null) {
            $queryParams['rm'] = ObjectSerializer::toQueryValue($rm, null);
        }
        // query params
        if ($forcerm !== null) {
            $queryParams['forcerm'] = ObjectSerializer::toQueryValue($forcerm, null);
        }
        // query params
        if ($memory !== null) {
            $queryParams['memory'] = ObjectSerializer::toQueryValue($memory, null);
        }
        // query params
        if ($memswap !== null) {
            $queryParams['memswap'] = ObjectSerializer::toQueryValue($memswap, null);
        }
        // query params
        if ($cpushares !== null) {
            $queryParams['cpushares'] = ObjectSerializer::toQueryValue($cpushares, null);
        }
        // query params
        if ($cpusetcpus !== null) {
            $queryParams['cpusetcpus'] = ObjectSerializer::toQueryValue($cpusetcpus, null);
        }
        // query params
        if ($cpuperiod !== null) {
            $queryParams['cpuperiod'] = ObjectSerializer::toQueryValue($cpuperiod, null);
        }
        // query params
        if ($cpuquota !== null) {
            $queryParams['cpuquota'] = ObjectSerializer::toQueryValue($cpuquota, null);
        }
        // query params
        if ($buildargs !== null) {
            $queryParams['buildargs'] = ObjectSerializer::toQueryValue($buildargs, null);
        }
        // query params
        if ($shmsize !== null) {
            $queryParams['shmsize'] = ObjectSerializer::toQueryValue($shmsize, null);
        }
        // query params
        if ($squash !== null) {
            $queryParams['squash'] = ObjectSerializer::toQueryValue($squash, null);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels, null);
        }
        // query params
        if ($networkmode !== null) {
            $queryParams['networkmode'] = ObjectSerializer::toQueryValue($networkmode, null);
        }
        // query params
        if ($platform !== null) {
            $queryParams['platform'] = ObjectSerializer::toQueryValue($platform, null);
        }
        // query params
        if ($target !== null) {
            $queryParams['target'] = ObjectSerializer::toQueryValue($target, null);
        }
        // query params
        if ($outputs !== null) {
            $queryParams['outputs'] = ObjectSerializer::toQueryValue($outputs, null);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($x_registry_config !== null) {
            $headerParams['X-Registry-Config'] = ObjectSerializer::toHeaderValue($x_registry_config);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageCommit
     *
     * Create a new image from a container
     *
     * @param  \Docker\Client\Model\ContainerConfig $body The container configuration (optional)
     * @param  string $container The ID or name of the container to commit (optional)
     * @param  string $repo Repository name for the created image (optional)
     * @param  string $tag Tag name for the create image (optional)
     * @param  string $comment Commit message (optional)
     * @param  string $author Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     * @param  bool $pause Whether to pause the container before committing (optional, default to true)
     * @param  string $changes &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\IdResponse
     */
    public function imageCommit($body = null, $container = null, $repo = null, $tag = null, $comment = null, $author = null, $pause = 'true', $changes = null)
    {
        list($response) = $this->imageCommitWithHttpInfo($body, $container, $repo, $tag, $comment, $author, $pause, $changes);
        return $response;
    }

    /**
     * Operation imageCommitWithHttpInfo
     *
     * Create a new image from a container
     *
     * @param  \Docker\Client\Model\ContainerConfig $body The container configuration (optional)
     * @param  string $container The ID or name of the container to commit (optional)
     * @param  string $repo Repository name for the created image (optional)
     * @param  string $tag Tag name for the create image (optional)
     * @param  string $comment Commit message (optional)
     * @param  string $author Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     * @param  bool $pause Whether to pause the container before committing (optional, default to true)
     * @param  string $changes &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\IdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageCommitWithHttpInfo($body = null, $container = null, $repo = null, $tag = null, $comment = null, $author = null, $pause = 'true', $changes = null)
    {
        $returnType = '\Docker\Client\Model\IdResponse';
        $request = $this->imageCommitRequest($body, $container, $repo, $tag, $comment, $author, $pause, $changes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\IdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageCommitAsync
     *
     * Create a new image from a container
     *
     * @param  \Docker\Client\Model\ContainerConfig $body The container configuration (optional)
     * @param  string $container The ID or name of the container to commit (optional)
     * @param  string $repo Repository name for the created image (optional)
     * @param  string $tag Tag name for the create image (optional)
     * @param  string $comment Commit message (optional)
     * @param  string $author Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     * @param  bool $pause Whether to pause the container before committing (optional, default to true)
     * @param  string $changes &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageCommitAsync($body = null, $container = null, $repo = null, $tag = null, $comment = null, $author = null, $pause = 'true', $changes = null)
    {
        return $this->imageCommitAsyncWithHttpInfo($body, $container, $repo, $tag, $comment, $author, $pause, $changes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageCommitAsyncWithHttpInfo
     *
     * Create a new image from a container
     *
     * @param  \Docker\Client\Model\ContainerConfig $body The container configuration (optional)
     * @param  string $container The ID or name of the container to commit (optional)
     * @param  string $repo Repository name for the created image (optional)
     * @param  string $tag Tag name for the create image (optional)
     * @param  string $comment Commit message (optional)
     * @param  string $author Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     * @param  bool $pause Whether to pause the container before committing (optional, default to true)
     * @param  string $changes &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageCommitAsyncWithHttpInfo($body = null, $container = null, $repo = null, $tag = null, $comment = null, $author = null, $pause = 'true', $changes = null)
    {
        $returnType = '\Docker\Client\Model\IdResponse';
        $request = $this->imageCommitRequest($body, $container, $repo, $tag, $comment, $author, $pause, $changes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageCommit'
     *
     * @param  \Docker\Client\Model\ContainerConfig $body The container configuration (optional)
     * @param  string $container The ID or name of the container to commit (optional)
     * @param  string $repo Repository name for the created image (optional)
     * @param  string $tag Tag name for the create image (optional)
     * @param  string $comment Commit message (optional)
     * @param  string $author Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;) (optional)
     * @param  bool $pause Whether to pause the container before committing (optional, default to true)
     * @param  string $changes &#x60;Dockerfile&#x60; instructions to apply while committing (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageCommitRequest($body = null, $container = null, $repo = null, $tag = null, $comment = null, $author = null, $pause = 'true', $changes = null)
    {

        $resourcePath = '/commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($container !== null) {
            $queryParams['container'] = ObjectSerializer::toQueryValue($container, null);
        }
        // query params
        if ($repo !== null) {
            $queryParams['repo'] = ObjectSerializer::toQueryValue($repo, null);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag, null);
        }
        // query params
        if ($comment !== null) {
            $queryParams['comment'] = ObjectSerializer::toQueryValue($comment, null);
        }
        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author, null);
        }
        // query params
        if ($pause !== null) {
            $queryParams['pause'] = ObjectSerializer::toQueryValue($pause, null);
        }
        // query params
        if ($changes !== null) {
            $queryParams['changes'] = ObjectSerializer::toQueryValue($changes, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageCreate
     *
     * Create an image
     *
     * @param  string $body Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (optional)
     * @param  string $from_image Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     * @param  string $from_src Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     * @param  string $repo Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     * @param  string $tag Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     * @param  string $message Set commit message for imported image. (optional)
     * @param  string[] $changes Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function imageCreate($body = null, $x_registry_auth = null, $from_image = null, $from_src = null, $repo = null, $tag = null, $message = null, $changes = null, $platform = null)
    {
        $this->imageCreateWithHttpInfo($body, $x_registry_auth, $from_image, $from_src, $repo, $tag, $message, $changes, $platform);
    }

    /**
     * Operation imageCreateWithHttpInfo
     *
     * Create an image
     *
     * @param  string $body Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (optional)
     * @param  string $from_image Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     * @param  string $from_src Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     * @param  string $repo Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     * @param  string $tag Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     * @param  string $message Set commit message for imported image. (optional)
     * @param  string[] $changes Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageCreateWithHttpInfo($body = null, $x_registry_auth = null, $from_image = null, $from_src = null, $repo = null, $tag = null, $message = null, $changes = null, $platform = null)
    {
        $returnType = '';
        $request = $this->imageCreateRequest($body, $x_registry_auth, $from_image, $from_src, $repo, $tag, $message, $changes, $platform);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageCreateAsync
     *
     * Create an image
     *
     * @param  string $body Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (optional)
     * @param  string $from_image Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     * @param  string $from_src Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     * @param  string $repo Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     * @param  string $tag Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     * @param  string $message Set commit message for imported image. (optional)
     * @param  string[] $changes Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageCreateAsync($body = null, $x_registry_auth = null, $from_image = null, $from_src = null, $repo = null, $tag = null, $message = null, $changes = null, $platform = null)
    {
        return $this->imageCreateAsyncWithHttpInfo($body, $x_registry_auth, $from_image, $from_src, $repo, $tag, $message, $changes, $platform)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageCreateAsyncWithHttpInfo
     *
     * Create an image
     *
     * @param  string $body Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (optional)
     * @param  string $from_image Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     * @param  string $from_src Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     * @param  string $repo Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     * @param  string $tag Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     * @param  string $message Set commit message for imported image. (optional)
     * @param  string[] $changes Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageCreateAsyncWithHttpInfo($body = null, $x_registry_auth = null, $from_image = null, $from_src = null, $repo = null, $tag = null, $message = null, $changes = null, $platform = null)
    {
        $returnType = '';
        $request = $this->imageCreateRequest($body, $x_registry_auth, $from_image, $from_src, $repo, $tag, $message, $changes, $platform);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageCreate'
     *
     * @param  string $body Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter (optional)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (optional)
     * @param  string $from_image Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. (optional)
     * @param  string $from_src Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image. (optional)
     * @param  string $repo Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. (optional)
     * @param  string $tag Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. (optional)
     * @param  string $message Set commit message for imported image. (optional)
     * @param  string[] $changes Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; (optional)
     * @param  string $platform Platform in the format os[/arch[/variant]] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageCreateRequest($body = null, $x_registry_auth = null, $from_image = null, $from_src = null, $repo = null, $tag = null, $message = null, $changes = null, $platform = null)
    {

        $resourcePath = '/images/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_image !== null) {
            $queryParams['fromImage'] = ObjectSerializer::toQueryValue($from_image, null);
        }
        // query params
        if ($from_src !== null) {
            $queryParams['fromSrc'] = ObjectSerializer::toQueryValue($from_src, null);
        }
        // query params
        if ($repo !== null) {
            $queryParams['repo'] = ObjectSerializer::toQueryValue($repo, null);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag, null);
        }
        // query params
        if ($message !== null) {
            $queryParams['message'] = ObjectSerializer::toQueryValue($message, null);
        }
        // query params
        if (is_array($changes)) {
            $changes = ObjectSerializer::serializeCollection($changes, 'csv', true);
        }
        if ($changes !== null) {
            $queryParams['changes'] = ObjectSerializer::toQueryValue($changes, null);
        }
        // query params
        if ($platform !== null) {
            $queryParams['platform'] = ObjectSerializer::toQueryValue($platform, null);
        }
        // header params
        if ($x_registry_auth !== null) {
            $headerParams['X-Registry-Auth'] = ObjectSerializer::toHeaderValue($x_registry_auth);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain', 'application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageDelete
     *
     * Remove an image
     *
     * @param  string $name Image name or ID (required)
     * @param  bool $force Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     * @param  bool $noprune Do not delete untagged parent images (optional, default to false)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\ImageDeleteResponseItem[]
     */
    public function imageDelete($name, $force = 'false', $noprune = 'false')
    {
        list($response) = $this->imageDeleteWithHttpInfo($name, $force, $noprune);
        return $response;
    }

    /**
     * Operation imageDeleteWithHttpInfo
     *
     * Remove an image
     *
     * @param  string $name Image name or ID (required)
     * @param  bool $force Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     * @param  bool $noprune Do not delete untagged parent images (optional, default to false)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\ImageDeleteResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function imageDeleteWithHttpInfo($name, $force = 'false', $noprune = 'false')
    {
        $returnType = '\Docker\Client\Model\ImageDeleteResponseItem[]';
        $request = $this->imageDeleteRequest($name, $force, $noprune);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ImageDeleteResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageDeleteAsync
     *
     * Remove an image
     *
     * @param  string $name Image name or ID (required)
     * @param  bool $force Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     * @param  bool $noprune Do not delete untagged parent images (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageDeleteAsync($name, $force = 'false', $noprune = 'false')
    {
        return $this->imageDeleteAsyncWithHttpInfo($name, $force, $noprune)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageDeleteAsyncWithHttpInfo
     *
     * Remove an image
     *
     * @param  string $name Image name or ID (required)
     * @param  bool $force Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     * @param  bool $noprune Do not delete untagged parent images (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageDeleteAsyncWithHttpInfo($name, $force = 'false', $noprune = 'false')
    {
        $returnType = '\Docker\Client\Model\ImageDeleteResponseItem[]';
        $request = $this->imageDeleteRequest($name, $force, $noprune);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageDelete'
     *
     * @param  string $name Image name or ID (required)
     * @param  bool $force Remove the image even if it is being used by stopped containers or has other tags (optional, default to false)
     * @param  bool $noprune Do not delete untagged parent images (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageDeleteRequest($name, $force = 'false', $noprune = 'false')
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling imageDelete'
            );
        }

        $resourcePath = '/images/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($force !== null) {
            $queryParams['force'] = ObjectSerializer::toQueryValue($force, null);
        }
        // query params
        if ($noprune !== null) {
            $queryParams['noprune'] = ObjectSerializer::toQueryValue($noprune, null);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageGet
     *
     * Export an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function imageGet($name)
    {
        list($response) = $this->imageGetWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation imageGetWithHttpInfo
     *
     * Export an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageGetWithHttpInfo($name)
    {
        $returnType = 'string';
        $request = $this->imageGetRequest($name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageGetAsync
     *
     * Export an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageGetAsync($name)
    {
        return $this->imageGetAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageGetAsyncWithHttpInfo
     *
     * Export an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageGetAsyncWithHttpInfo($name)
    {
        $returnType = 'string';
        $request = $this->imageGetRequest($name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageGet'
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageGetRequest($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling imageGet'
            );
        }

        $resourcePath = '/images/{name}/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/x-tar']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/x-tar'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageGetAll
     *
     * Export several images
     *
     * @param  string[] $names Image names to filter by (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function imageGetAll($names = null)
    {
        list($response) = $this->imageGetAllWithHttpInfo($names);
        return $response;
    }

    /**
     * Operation imageGetAllWithHttpInfo
     *
     * Export several images
     *
     * @param  string[] $names Image names to filter by (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageGetAllWithHttpInfo($names = null)
    {
        $returnType = 'string';
        $request = $this->imageGetAllRequest($names);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageGetAllAsync
     *
     * Export several images
     *
     * @param  string[] $names Image names to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageGetAllAsync($names = null)
    {
        return $this->imageGetAllAsyncWithHttpInfo($names)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageGetAllAsyncWithHttpInfo
     *
     * Export several images
     *
     * @param  string[] $names Image names to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageGetAllAsyncWithHttpInfo($names = null)
    {
        $returnType = 'string';
        $request = $this->imageGetAllRequest($names);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageGetAll'
     *
     * @param  string[] $names Image names to filter by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageGetAllRequest($names = null)
    {

        $resourcePath = '/images/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($names)) {
            $names = ObjectSerializer::serializeCollection($names, 'csv', true);
        }
        if ($names !== null) {
            $queryParams['names'] = ObjectSerializer::toQueryValue($names, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/x-tar']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/x-tar'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageHistory
     *
     * Get the history of an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\HistoryResponseItem[]
     */
    public function imageHistory($name)
    {
        list($response) = $this->imageHistoryWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation imageHistoryWithHttpInfo
     *
     * Get the history of an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\HistoryResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function imageHistoryWithHttpInfo($name)
    {
        $returnType = '\Docker\Client\Model\HistoryResponseItem[]';
        $request = $this->imageHistoryRequest($name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\HistoryResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageHistoryAsync
     *
     * Get the history of an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageHistoryAsync($name)
    {
        return $this->imageHistoryAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageHistoryAsyncWithHttpInfo
     *
     * Get the history of an image
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageHistoryAsyncWithHttpInfo($name)
    {
        $returnType = '\Docker\Client\Model\HistoryResponseItem[]';
        $request = $this->imageHistoryRequest($name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageHistory'
     *
     * @param  string $name Image name or ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageHistoryRequest($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling imageHistory'
            );
        }

        $resourcePath = '/images/{name}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageInspect
     *
     * Inspect an image
     *
     * @param  string $name Image name or id (required)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\Image
     */
    public function imageInspect($name)
    {
        list($response) = $this->imageInspectWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation imageInspectWithHttpInfo
     *
     * Inspect an image
     *
     * @param  string $name Image name or id (required)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\Image, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageInspectWithHttpInfo($name)
    {
        $returnType = '\Docker\Client\Model\Image';
        $request = $this->imageInspectRequest($name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\Image',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageInspectAsync
     *
     * Inspect an image
     *
     * @param  string $name Image name or id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageInspectAsync($name)
    {
        return $this->imageInspectAsyncWithHttpInfo($name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageInspectAsyncWithHttpInfo
     *
     * Inspect an image
     *
     * @param  string $name Image name or id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageInspectAsyncWithHttpInfo($name)
    {
        $returnType = '\Docker\Client\Model\Image';
        $request = $this->imageInspectRequest($name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageInspect'
     *
     * @param  string $name Image name or id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageInspectRequest($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling imageInspect'
            );
        }

        $resourcePath = '/images/{name}/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageList
     *
     * List Images
     *
     * @param  bool $all Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) (optional)
     * @param  bool $digests Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\ImageSummary[]
     */
    public function imageList($all = 'false', $filters = null, $digests = 'false')
    {
        list($response) = $this->imageListWithHttpInfo($all, $filters, $digests);
        return $response;
    }

    /**
     * Operation imageListWithHttpInfo
     *
     * List Images
     *
     * @param  bool $all Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) (optional)
     * @param  bool $digests Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\ImageSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function imageListWithHttpInfo($all = 'false', $filters = null, $digests = 'false')
    {
        $returnType = '\Docker\Client\Model\ImageSummary[]';
        $request = $this->imageListRequest($all, $filters, $digests);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ImageSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageListAsync
     *
     * List Images
     *
     * @param  bool $all Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) (optional)
     * @param  bool $digests Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageListAsync($all = 'false', $filters = null, $digests = 'false')
    {
        return $this->imageListAsyncWithHttpInfo($all, $filters, $digests)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageListAsyncWithHttpInfo
     *
     * List Images
     *
     * @param  bool $all Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) (optional)
     * @param  bool $digests Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageListAsyncWithHttpInfo($all = 'false', $filters = null, $digests = 'false')
    {
        $returnType = '\Docker\Client\Model\ImageSummary[]';
        $request = $this->imageListRequest($all, $filters, $digests);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageList'
     *
     * @param  bool $all Show all images. Only images from a final layer (no children) are shown by default. (optional, default to false)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) (optional)
     * @param  bool $digests Show digest information as a &#x60;RepoDigests&#x60; field on each image. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageListRequest($all = 'false', $filters = null, $digests = 'false')
    {

        $resourcePath = '/images/json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($all !== null) {
            $queryParams['all'] = ObjectSerializer::toQueryValue($all, null);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters, null);
        }
        // query params
        if ($digests !== null) {
            $queryParams['digests'] = ObjectSerializer::toQueryValue($digests, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageLoad
     *
     * Import images
     *
     * @param  Object $body Tar archive containing images (optional)
     * @param  bool $quiet Suppress progress details during load. (optional, default to false)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function imageLoad($body = null, $quiet = 'false')
    {
        $this->imageLoadWithHttpInfo($body, $quiet);
    }

    /**
     * Operation imageLoadWithHttpInfo
     *
     * Import images
     *
     * @param  Object $body Tar archive containing images (optional)
     * @param  bool $quiet Suppress progress details during load. (optional, default to false)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageLoadWithHttpInfo($body = null, $quiet = 'false')
    {
        $returnType = '';
        $request = $this->imageLoadRequest($body, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageLoadAsync
     *
     * Import images
     *
     * @param  Object $body Tar archive containing images (optional)
     * @param  bool $quiet Suppress progress details during load. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageLoadAsync($body = null, $quiet = 'false')
    {
        return $this->imageLoadAsyncWithHttpInfo($body, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageLoadAsyncWithHttpInfo
     *
     * Import images
     *
     * @param  Object $body Tar archive containing images (optional)
     * @param  bool $quiet Suppress progress details during load. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageLoadAsyncWithHttpInfo($body = null, $quiet = 'false')
    {
        $returnType = '';
        $request = $this->imageLoadRequest($body, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageLoad'
     *
     * @param  Object $body Tar archive containing images (optional)
     * @param  bool $quiet Suppress progress details during load. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageLoadRequest($body = null, $quiet = 'false')
    {

        $resourcePath = '/images/load';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-tar']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imagePrune
     *
     * Delete unused images
     *
     * @param  string $filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\ImagePruneResponse
     */
    public function imagePrune($filters = null)
    {
        list($response) = $this->imagePruneWithHttpInfo($filters);
        return $response;
    }

    /**
     * Operation imagePruneWithHttpInfo
     *
     * Delete unused images
     *
     * @param  string $filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\ImagePruneResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function imagePruneWithHttpInfo($filters = null)
    {
        $returnType = '\Docker\Client\Model\ImagePruneResponse';
        $request = $this->imagePruneRequest($filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ImagePruneResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imagePruneAsync
     *
     * Delete unused images
     *
     * @param  string $filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imagePruneAsync($filters = null)
    {
        return $this->imagePruneAsyncWithHttpInfo($filters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imagePruneAsyncWithHttpInfo
     *
     * Delete unused images
     *
     * @param  string $filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imagePruneAsyncWithHttpInfo($filters = null)
    {
        $returnType = '\Docker\Client\Model\ImagePruneResponse';
        $request = $this->imagePruneRequest($filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imagePrune'
     *
     * @param  string $filters Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imagePruneRequest($filters = null)
    {

        $resourcePath = '/images/prune';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imagePush
     *
     * Push an image
     *
     * @param  string $name Image name or ID. (required)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (required)
     * @param  string $tag The tag to associate with the image on the registry. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function imagePush($name, $x_registry_auth, $tag = null)
    {
        $this->imagePushWithHttpInfo($name, $x_registry_auth, $tag);
    }

    /**
     * Operation imagePushWithHttpInfo
     *
     * Push an image
     *
     * @param  string $name Image name or ID. (required)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (required)
     * @param  string $tag The tag to associate with the image on the registry. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function imagePushWithHttpInfo($name, $x_registry_auth, $tag = null)
    {
        $returnType = '';
        $request = $this->imagePushRequest($name, $x_registry_auth, $tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imagePushAsync
     *
     * Push an image
     *
     * @param  string $name Image name or ID. (required)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (required)
     * @param  string $tag The tag to associate with the image on the registry. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imagePushAsync($name, $x_registry_auth, $tag = null)
    {
        return $this->imagePushAsyncWithHttpInfo($name, $x_registry_auth, $tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imagePushAsyncWithHttpInfo
     *
     * Push an image
     *
     * @param  string $name Image name or ID. (required)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (required)
     * @param  string $tag The tag to associate with the image on the registry. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imagePushAsyncWithHttpInfo($name, $x_registry_auth, $tag = null)
    {
        $returnType = '';
        $request = $this->imagePushRequest($name, $x_registry_auth, $tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imagePush'
     *
     * @param  string $name Image name or ID. (required)
     * @param  string $x_registry_auth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. (required)
     * @param  string $tag The tag to associate with the image on the registry. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imagePushRequest($name, $x_registry_auth, $tag = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling imagePush'
            );
        }
        // verify the required parameter 'x_registry_auth' is set
        if ($x_registry_auth === null || (is_array($x_registry_auth) && count($x_registry_auth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_registry_auth when calling imagePush'
            );
        }

        $resourcePath = '/images/{name}/push';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag, null);
        }
        // header params
        if ($x_registry_auth !== null) {
            $headerParams['X-Registry-Auth'] = ObjectSerializer::toHeaderValue($x_registry_auth);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageSearch
     *
     * Search images
     *
     * @param  string $term Term to search (required)
     * @param  int $limit Maximum number of results to return (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#x27;number&#x27; stars. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docker\Client\Model\ImageSearchResponseItem[]
     */
    public function imageSearch($term, $limit = null, $filters = null)
    {
        list($response) = $this->imageSearchWithHttpInfo($term, $limit, $filters);
        return $response;
    }

    /**
     * Operation imageSearchWithHttpInfo
     *
     * Search images
     *
     * @param  string $term Term to search (required)
     * @param  int $limit Maximum number of results to return (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#x27;number&#x27; stars. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docker\Client\Model\ImageSearchResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function imageSearchWithHttpInfo($term, $limit = null, $filters = null)
    {
        $returnType = '\Docker\Client\Model\ImageSearchResponseItem[]';
        $request = $this->imageSearchRequest($term, $limit, $filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ImageSearchResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageSearchAsync
     *
     * Search images
     *
     * @param  string $term Term to search (required)
     * @param  int $limit Maximum number of results to return (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#x27;number&#x27; stars. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageSearchAsync($term, $limit = null, $filters = null)
    {
        return $this->imageSearchAsyncWithHttpInfo($term, $limit, $filters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageSearchAsyncWithHttpInfo
     *
     * Search images
     *
     * @param  string $term Term to search (required)
     * @param  int $limit Maximum number of results to return (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#x27;number&#x27; stars. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageSearchAsyncWithHttpInfo($term, $limit = null, $filters = null)
    {
        $returnType = '\Docker\Client\Model\ImageSearchResponseItem[]';
        $request = $this->imageSearchRequest($term, $limit, $filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageSearch'
     *
     * @param  string $term Term to search (required)
     * @param  int $limit Maximum number of results to return (optional)
     * @param  string $filters A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#x27;number&#x27; stars. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageSearchRequest($term, $limit = null, $filters = null)
    {
        // verify the required parameter 'term' is set
        if ($term === null || (is_array($term) && count($term) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $term when calling imageSearch'
            );
        }

        $resourcePath = '/images/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($term !== null) {
            $queryParams['term'] = ObjectSerializer::toQueryValue($term, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($filters !== null) {
            $queryParams['filters'] = ObjectSerializer::toQueryValue($filters, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imageTag
     *
     * Tag an image
     *
     * @param  string $name Image name or ID to tag. (required)
     * @param  string $repo The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     * @param  string $tag The name of the new tag. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function imageTag($name, $repo = null, $tag = null)
    {
        $this->imageTagWithHttpInfo($name, $repo, $tag);
    }

    /**
     * Operation imageTagWithHttpInfo
     *
     * Tag an image
     *
     * @param  string $name Image name or ID to tag. (required)
     * @param  string $repo The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     * @param  string $tag The name of the new tag. (optional)
     *
     * @throws \Docker\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function imageTagWithHttpInfo($name, $repo = null, $tag = null)
    {
        $returnType = '';
        $request = $this->imageTagRequest($name, $repo, $tag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Docker\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imageTagAsync
     *
     * Tag an image
     *
     * @param  string $name Image name or ID to tag. (required)
     * @param  string $repo The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     * @param  string $tag The name of the new tag. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageTagAsync($name, $repo = null, $tag = null)
    {
        return $this->imageTagAsyncWithHttpInfo($name, $repo, $tag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imageTagAsyncWithHttpInfo
     *
     * Tag an image
     *
     * @param  string $name Image name or ID to tag. (required)
     * @param  string $repo The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     * @param  string $tag The name of the new tag. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imageTagAsyncWithHttpInfo($name, $repo = null, $tag = null)
    {
        $returnType = '';
        $request = $this->imageTagRequest($name, $repo, $tag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imageTag'
     *
     * @param  string $name Image name or ID to tag. (required)
     * @param  string $repo The repository to tag in. For example, &#x60;someuser/someimage&#x60;. (optional)
     * @param  string $tag The name of the new tag. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function imageTagRequest($name, $repo = null, $tag = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling imageTag'
            );
        }

        $resourcePath = '/images/{name}/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($repo !== null) {
            $queryParams['repo'] = ObjectSerializer::toQueryValue($repo, null);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag, null);
        }

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/plain'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getSocketMode())
        {
            $options = $this->config->getSocketRequestOptions();
        }
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
